package com.springvuegradle.model.data;

import com.springvuegradle.model.requests.CreateActivityRequest;
import org.hibernate.annotations.CreationTimestamp;

import javax.persistence.*;
import javax.validation.constraints.NotNull;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;

/**
 * JPA representation of a change log entry
 *
 */

@Entity
@Table(name = "changelog")
public class ActivityChangeLog extends ChangeLog {

	/**
	 * Construct a change log entry object and automatically assign their ID
	 */
	protected ActivityChangeLog() {
	}

	/**
	 * Construct a change log entry object for an activity with all parameters (excluding the automatically assigned id and timestamp)
	 * @param entityId the id of the entity which the change was made to
	 * @param changedAttribute the attribute of the entity which was changed
	 * @param editingUser the user who made the change
	 * @param actionType ActionType enum representing the action done in the change
	 * @param oldValue (if present) the old value of the attribute that was changed
	 * @param newValue (if present) the new value that the changed attribute was set to
	 */
	public ActivityChangeLog(@NotNull long entityId,
                             @NotNull ChangedAttribute changedAttribute, User editingUser, @NotNull ActionType actionType,
                             String oldValue, String newValue) {
		this.entity = ChangeLogEntity.ACTIVITY;
		this.entityId = entityId;
		this.changedAttribute = changedAttribute;
		this.editingUser = editingUser;
		this.actionType = actionType;
		this.oldValue = oldValue;
		this.newValue = newValue;
	}

	/**
	 * creates a list of ChangeLogs generated by the update operation on an activity
	 * @param oldActivityInfo the activity whose information is being updated
	 * @param newActivityInfo a valid request with the new activity information
	 */
	public static List<ChangeLog> getLogsForUpdateActivity(Activity oldActivityInfo, CreateActivityRequest newActivityInfo, User editingUser) {
		List<ChangeLog> changes = new ArrayList<>();
		if (!oldActivityInfo.getActivityName().equals(newActivityInfo.getActivityName())) {
			changes.add(
					new ActivityChangeLog(oldActivityInfo.getId(),
							ChangedAttribute.ACTIVITY_NAME,
							editingUser,
							ActionType.UPDATED, oldActivityInfo.getActivityName(), newActivityInfo.getActivityName()));
		}
		// TODO more conditions
		return changes;
	}

	/**
	 * creates a ChangeLog generated by an activity's creation
	 * @param newActivityInfo an Activity object that has an id (i.e. has been saved to the database)
	 */
	public static ChangeLog getLogsForUpdateActivity(Activity newActivityInfo) {
		return new ActivityChangeLog(newActivityInfo.getId(),
				ChangedAttribute.ACTIVITY_EXISTENCE,
				newActivityInfo.getCreator().getUser(),
				ActionType.CREATED, null, newActivityInfo.getActivityName());
	}

}
