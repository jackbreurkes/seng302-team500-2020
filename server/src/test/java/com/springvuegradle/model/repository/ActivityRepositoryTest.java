package com.springvuegradle.model.repository;

import java.time.LocalDate;
import java.util.Collections;
import java.util.Optional;

import com.springvuegradle.model.data.*;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInstance;
import org.junit.jupiter.api.extension.ExtendWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.annotation.DirtiesContext;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.springframework.test.context.transaction.TestTransaction;

import static org.junit.jupiter.api.Assertions.*;

@ExtendWith(SpringExtension.class)
@DataJpaTest
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
@DirtiesContext(classMode = DirtiesContext.ClassMode.AFTER_CLASS)
class ActivityRepositoryTest {

    @Autowired
    private ActivityRepository activityRepository;

    @Autowired
    private ActivityTypeRepository activityTypeRepository;

    @Autowired
    private ProfileRepository profileRepository;

    private Profile testCreator;
    private ActivityType testActivityType;

    @BeforeAll
    void beforeAll() {
        User testCreatorUser = new User();
        testCreator = new Profile(testCreatorUser, "Testy", "McTestFace", LocalDate.EPOCH, Gender.NON_BINARY);
        testCreator = profileRepository.save(testCreator);
        testActivityType = new ActivityType("Walking");
        testActivityType = activityTypeRepository.save(testActivityType);
    }

    @Test
    public void deleteActivity_DoesNotCascade() {
        Activity activity = new Activity("Test Activity", false, "New Zealand", testCreator, Collections.singleton(testActivityType));
        Activity savedActivity = activityRepository.save(activity);
        activityRepository.delete(savedActivity);
        Optional<Profile> savedCreator = profileRepository.findById(testCreator.getUser().getUserId());
        Optional<ActivityType> savedActivityType = activityTypeRepository.findById(testActivityType.getActivityTypeId());
        assertTrue(savedCreator.isPresent());
        assertTrue(savedActivityType.isPresent());
    }

    @Test
    public void addOutcome_saveActivity_automaticallyLinkedToActivity() {
        Activity activity = new Activity("Test Activity", false, "New Zealand", testCreator, Collections.singleton(testActivityType));
        ActivityOutcome outcome = new ActivityOutcome("this is an outcome", "km/h");
        activity.addOutcome(outcome);
        activityRepository.save(activity);
        TestTransaction.flagForCommit(); // need this, otherwise the next line does a rollback
        TestTransaction.end(); // ensures the test session is deleted before trying findById
        TestTransaction.start();
        Activity savedActivity = activityRepository.getOne(activity.getId());

        assertEquals(1, savedActivity.getOutcomes().size());
        ActivityOutcome savedOutcome = savedActivity.getOutcomes().get(0);
        assertNotSame(outcome, savedOutcome); // savedOutcome should be a new object generated by Hibernate
        assertEquals(outcome.getDescription(), savedOutcome.getDescription());
        assertEquals(savedActivity.getId(), savedOutcome.getActivity().getId());
    }

    @Test
    public void removeOutcome_saveActivity_outcomeRemovedFromSavedActivity() {
        Activity activity = new Activity("Test Activity", false, "New Zealand", testCreator, Collections.singleton(testActivityType));
        ActivityOutcome outcome1 = new ActivityOutcome("this is an outcome", "km/h");
        ActivityOutcome outcome2 = new ActivityOutcome("this is a second outcome", "ms^-1");
        activity.addOutcome(outcome1);
        activity.addOutcome(outcome2);
        activityRepository.save(activity);
        TestTransaction.flagForCommit(); // need this, otherwise the next line does a rollback
        TestTransaction.end(); // ensures the test session is deleted before trying findById
        TestTransaction.start();
        activity = activityRepository.getOne(activity.getId());
        activity.getOutcomes().remove(0);
        activityRepository.save(activity);
        TestTransaction.flagForCommit(); TestTransaction.end(); TestTransaction.start();
        Activity savedActivity = activityRepository.getOne(activity.getId());

        assertNotSame(activity, savedActivity);
        assertEquals(1, savedActivity.getOutcomes().size());
        ActivityOutcome savedOutcome = savedActivity.getOutcomes().get(0);
        assertNotSame(outcome2, savedOutcome); // savedOutcome should be a new object generated by Hibernate
        assertEquals(outcome2.getDescription(), savedOutcome.getDescription());
        assertEquals(savedActivity.getId(), savedOutcome.getActivity().getId());
    }

}