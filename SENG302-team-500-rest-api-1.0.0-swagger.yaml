openapi: 3.0.0
info:
  description: This is a simple API
  version: "1.0.0"
  title: SENG302 Team 500 API
tags:
  - name: profiles
    description: Profile information
components:
  securitySchemes:
    SessionToken:
      type: apiKey
      name: X-Auth-Token
      in: header
  schemas:
    User:
      title: User
      type: object
      required:
        - lastname
        - firstname
        - primary_email
        - date_of_birth
        - gender
      properties:
        lastname:
          type: string
          example: "Aaronson"
        firstname:
          type: string
          example: "Aaron"
        middlename:
          type: string
          example: "Bartholomew"
        nickname:
          type: string
          example: "A-Dog"
        primary_email:
          type: string
          format: email
          example: "aaron.a@gmail.com"
        bio:
          type: string
          example: "Aaron loves to keep his API spec updated, lest he be unable to determine how his software fits together"
        date_of_birth:
          type: string
          format: YYYY-MM-DD
          example: "1969-06-17"
        gender:
          type: string
          example: "male"
        fitness:
          type: number
          example: 2
        passports:
          type: array
          items:
            type: string
          example: ["New Zealand", "Australia"]
        additional_email:
          type: array
          items:
            type: string
          example: ["john.smith@secretservice.govt.nz"]
    UserResponse:
      title: UserResponse
      type: object
      allOf:
        - $ref: '#/components/schemas/User'
        - type: object
      required:
        - profile_id
      properties:
        profile_id:
          type: integer
          example: 1
      

paths:
  /profiles:
    post:
      tags:
        - profiles
      summary: creates a new user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: 'User created'
        '400':
          description: 'Invalid input'
        '403':
          description: 'Collision (e.g. email already exists)'
  /profiles/{profile_id}:
    get:
      tags:
        - profiles
      security:
        - SessionToken: []
      parameters:
        - in: path
          name: profile_id
          schema:
            $ref: '#/components/schemas/UserResponse/properties/profile_id'
          required: true
          description: numeric ID of the user to get
      responses:
        '200':
          description: profile of desired user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '404':
          description: user not found
  /inventory:
    get:
      tags:
        - developers
      summary: searches inventory
      operationId: searchInventory
      description: |
        By passing in the appropriate options, you can search for
        available inventory in the system
      parameters:
        - in: query
          name: searchString
          description: pass an optional search string for looking up inventory
          required: false
          schema:
            type: string
        - in: query
          name: skip
          description: number of records to skip for pagination
          schema:
            type: integer
            format: int32
            minimum: 0
        - in: query
          name: limit
          description: maximum number of records to return
          schema:
            type: integer
            format: int32
            minimum: 0
            maximum: 50
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InventoryItem'
        '400':
          description: bad input parameter
    post:
      tags:
        - admins
      summary: adds an inventory item
      operationId: addInventory
      description: Adds an item to the system
      responses:
        '201':
          description: item created
        '400':
          description: 'invalid input, object invalid'
        '409':
          description: an existing item already exists
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InventoryItem'
        description: Inventory item to add
# Added by API Auto Mocking Plugin
servers:
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/SENG302-team-500/rest-api/1.0.0