<?xml version="1.0" encoding="UTF-8"?>
<testExecutions version="1">
    <file path="C:\Users\livvy\OneDrive\Desktop\Learning\2020 Sem2\SENG302\team-500\client\src\scripts\FormValidator.test.ts">
        <testCase name="expect &quot;password&quot; to be a valid password" duration="3"/>
        <testCase name="expect &quot;securepassword&quot; to be a valid password" duration="1"/>
        <testCase name="expect &quot;m0r3s3cur3P455w@rd&quot; to be a valid password" duration="0"/>
        <testCase name="expect &quot;eggs and bacon&quot; to be a valid password" duration="0"/>
        <testCase name="expect &quot;7charac&quot; to be an invalid password" duration="1"/>
        <testCase name="expect &quot;eggs&quot; to be an invalid password" duration="0"/>
        <testCase name="expect &quot;&quot; to be an invalid password" duration="0"/>
        <testCase name="expect test to be a valid first name" duration="1"/>
        <testCase name="expect e to be a valid first name" duration="0"/>
        <testCase name="expect wowitsareallylongnamethatscool to be a valid first name" duration="1"/>
        <testCase name="expect Leigh Anne to be a valid first name" duration="0"/>
        <testCase name="expect Bobby John to be a valid first name" duration="0"/>
        <testCase name="expect Leigh-Anne to be a valid first name" duration="0"/>
        <testCase name="expect Bobby-John to be a valid first name" duration="1"/>
        <testCase name="expect AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA to be an invalid first name" duration="0"/>
        <testCase name="expect wowitsareallylongnamethatsreallycool to be an invalid first name" duration="0"/>
        <testCase name="expect H4rry to be an invalid first name" duration="1"/>
        <testCase name="expect Brianna42 to be an invalid first name" duration="0"/>
        <testCase name="expect 8 to be an invalid first name" duration="0"/>
        <testCase name="expect &quot;&quot; to be an invalid first name" duration="0"/>
        <testCase name="expect undefined to be an invalid first name" duration="1"/>
        <testCase name="expect Williams to be a valid last name" duration="0"/>
        <testCase name="expect E to be a valid last name" duration="0"/>
        <testCase name="expect Smith to be a valid last name" duration="1"/>
        <testCase name="expect Lee to be a valid last name" duration="0"/>
        <testCase name="expect Wowitsareallylongnamethatscool to be a valid last name" duration="0"/>
        <testCase name="expect Pevensie Smith to be a valid last name" duration="0"/>
        <testCase name="expect ALastnameA LastnameB LastnameC to be a valid last name" duration="1"/>
        <testCase name="expect Smith-Lee to be a valid last name" duration="1"/>
        <testCase name="expect Hyphen-Hyphen-Hyphen to be a valid last name" duration="0"/>
        <testCase name="expect WilliamsIsNotAReallyLongLastNameNormally to be an invalid last name" duration="0"/>
        <testCase name="expect Wowitsareallylongnamethatiscool to be an invalid last name" duration="1"/>
        <testCase name="expect William5 to be an invalid last name" duration="0"/>
        <testCase name="expect 1 to be an invalid last name" duration="0"/>
        <testCase name="expect Chan09 to be an invalid last name" duration="0"/>
        <testCase name="expect &quot;&quot; to be an invalid last name" duration="1"/>
        <testCase name="expect undefined to be an invalid last name" duration="0"/>
        <testCase name="expect Robin to be a valid middle name" duration="0"/>
        <testCase name="expect A to be a valid middle name" duration="0"/>
        <testCase name="expect John to be a valid middle name" duration="1"/>
        <testCase name="expect Anna to be a valid middle name" duration="0"/>
        <testCase name="expect Wowitsareallylongnamethatscool to be a valid middle name" duration="0"/>
        <testCase name="expect Anna Lee to be a valid middle name" duration="0"/>
        <testCase name="expect Robert John to be a valid middle name" duration="1"/>
        <testCase name="expect Anna-Lee to be a valid middle name" duration="0"/>
        <testCase name="expect Robert-John to be a valid middle name" duration="0"/>
        <testCase name="expect SomeReallyLongMiddleNameThatIsActuallyRidiculous to be an invalid middle name" duration="1"/>
        <testCase name="expect Wowitsareallylongnamethatiscool to be an invalid middle name" duration="0"/>
        <testCase name="expect William5 to be an invalid middle name" duration="0"/>
        <testCase name="expect 1 to be an invalid middle name" duration="6"/>
        <testCase name="expect Chan09 to be an invalid middle name" duration="1"/>
        <testCase name="expect &quot;&quot; to be a valid middle name" duration="0"/>
        <testCase name="expect undefined to be a valid middle name" duration="1"/>
        <testCase name="expect NewUser64 to be a valid nickname" duration="0"/>
        <testCase name="expect 123456 to be a valid nickname" duration="1"/>
        <testCase name="expect AAAAAA to be a valid nickname" duration="0"/>
        <testCase name="expect Wowitsareallylongnamethatsgr8! to be a valid nickname" duration="1"/>
        <testCase name="expect Wowitsareallylongnamethatscool to be a valid nickname" duration="0"/>
        <testCase name="expect SomeReallyLongNicknameThatIsActuallyRidiculous! to be an invalid nickname" duration="0"/>
        <testCase name="expect Wowitsareallylongnamethatiscool to be an invalid nickname" duration="0"/>
        <testCase name="expect Six! to be an invalid nickname" duration="0"/>
        <testCase name="expect Short to be an invalid nickname" duration="1"/>
        <testCase name="expect A to be an invalid nickname" duration="0"/>
        <testCase name="expect I am a new user to be an invalid nickname" duration="0"/>
        <testCase name="expect  Whitespace to be an invalid nickname" duration="0"/>
        <testCase name="expect Whitespace  to be an invalid nickname" duration="1"/>
        <testCase name="expect 	TabbyTabTab to be an invalid nickname" duration="0"/>
        <testCase name="expect 
AWholeNewLine to be an invalid nickname" duration="0"/>
        <testCase name="expect &quot;&quot; to be a valid nickname" duration="0"/>
        <testCase name="expect undefined to be a valid nickname" duration="1"/>
        <testCase name="expect This is my bio! to be a valid bio" duration="0"/>
        <testCase name="expect 12345678 to be a valid bio" duration="0"/>
        <testCase name="expect AAAAAAAA to be a valid bio" duration="0"/>
        <testCase name="expect A whole new bio has been made! 1234567890 to be a valid bio" duration="0"/>
        <testCase name="expect Short! to be an invalid bio" duration="0"/>
        <testCase name="expect A to be an invalid bio" duration="0"/>
        <testCase name="expect TinyBio to be an invalid bio" duration="0"/>
        <testCase name="expect A bio. to be an invalid bio" duration="0"/>
        <testCase name="expect &quot;&quot; to be a valid bio" duration="1"/>
        <testCase name="expect undefined to be a valid bio" duration="0"/>
        <testCase name="expect 2000-12-29 to be a valid date of birth" duration="0"/>
        <testCase name="expect 1900-01-01 to be a valid date of birth" duration="1"/>
        <testCase name="expect 2020-07-17 to be a valid date of birth" duration="0"/>
        <testCase name="expect 2000-12-32 to be an invalid date of birth" duration="0"/>
        <testCase name="expect 2001-02-31 to be an invalid date of birth" duration="0"/>
        <testCase name="expect 3000-12-25 to be an invalid date of birth" duration="1"/>
        <testCase name="expect 2021-02-28 to be an invalid date of birth" duration="0"/>
        <testCase name="expect 2020-07-18 to be an invalid date of birth" duration="0"/>
        <testCase name="expect 1000-12-30 to be an invalid date of birth" duration="0"/>
        <testCase name="expect 1899-12-31 to be an invalid date of birth" duration="1"/>
        <testCase name="expect 0000-01-01 to be an invalid date of birth" duration="0"/>
        <testCase name="expect Today to be an invalid date of birth" duration="0"/>
        <testCase name="expect Wednesday 24th June, 2000 to be an invalid date of birth" duration="0"/>
        <testCase name="expect 2000/01/01 to be an invalid date of birth" duration="1"/>
        <testCase name="expect 01-02-2003 to be an invalid date of birth" duration="0"/>
        <testCase name="expect 00-04-31 to be an invalid date of birth" duration="0"/>
        <testCase name="expect 2000-1-1 to be an invalid date of birth" duration="1"/>
        <testCase name="expect &quot;&quot; to be an invalid date of birth" duration="0"/>
        <testCase name="expect undefined to be an invalid date of birth" duration="0"/>
        <testCase name="expect Male to be a valid gender" duration="0"/>
        <testCase name="expect female to be a valid gender" duration="1"/>
        <testCase name="expect non-BINARY to be a valid gender" duration="0"/>
        <testCase name="expect FeMaLe to be a valid gender" duration="0"/>
        <testCase name="expect n/a to be an invalid gender" duration="0"/>
        <testCase name="expect M to be an invalid gender" duration="1"/>
        <testCase name="expect woman to be an invalid gender" duration="0"/>
        <testCase name="expect nothing to be an invalid gender" duration="0"/>
        <testCase name="expect &quot;&quot; to be an invalid gender" duration="1"/>
        <testCase name="expect undefined to be an invalid gender" duration="0"/>
    </file>
    <file path="C:\Users\livvy\OneDrive\Desktop\Learning\2020 Sem2\SENG302\team-500\client\src\controllers\login.controller.test.ts">
        <testCase name="expect submitForm to resolve and call login" duration="6"/>
    </file>
    <file path="C:\Users\livvy\OneDrive\Desktop\Learning\2020 Sem2\SENG302\team-500\client\src\controllers\activity.controller.test.ts">
        <testCase name="expect addActivityType to throw an error if Walking is already added to the activity" duration="18"/>
        <testCase name="expect addActivityType to throw an error if Existing is already added to the activity" duration="1"/>
        <testCase name="expect addActivityType to throw an error if Whatever is already added to the activity" duration="1"/>
        <testCase name="expect addActivityType to throw an error if trying to add a non-existent activity type" duration="1"/>
        <testCase name="expect addActivityType to throw an error if trying to add a non-existent activity type" duration="0"/>
        <testCase name="expect addActivityType to throw an error if trying to add a non-existent activity type" duration="1"/>
        <testCase name="expect addActivityType to throw an error if trying to add a non-existent activity type" duration="1"/>
        <testCase name="expect addActivityType to add valid activity types to an activity without creating the activity" duration="1"/>
        <testCase name="expect addActivityType to add valid activity types to an activity without creating the activity" duration="1"/>
        <testCase name="expect addActivityType to add valid activity types to an activity without creating the activity" duration="1"/>
        <testCase name="expect addActivityType to add valid activity types to an activity without creating the activity" duration="0"/>
        <testCase name="expect throw an error if activity type has not been added to the activity" duration="1"/>
        <testCase name="expect throw an error if activity type has not been added to the activity" duration="0"/>
        <testCase name="expect throw an error if activity type has not been added to the activity" duration="0"/>
        <testCase name="expect removeActivityType to remove activity type if it has been added to the activity" duration="1"/>
        <testCase name="expect removeActivityType to remove activity type if it has been added to the activity" duration="0"/>
        <testCase name="expect removeActivityType to remove activity type if it has been added to the activity" duration="1"/>
        <testCase name="test that activity names between 4 and 30 characters inclusive are valid" duration="1"/>
        <testCase name="test that activity names between 4 and 30 characters inclusive are valid" duration="0"/>
        <testCase name="test that activity names between 4 and 30 characters inclusive are valid" duration="0"/>
        <testCase name="test that activity names under 4 characters are invalid" duration="1"/>
        <testCase name="test that activity names under 4 characters are invalid" duration="0"/>
        <testCase name="test that activity names over 30 characters are invalid" duration="0"/>
        <testCase name="test that activity names over 30 characters are invalid" duration="1"/>
        <testCase name="expect This is my description! to be a valid description" duration="0"/>
        <testCase name="expect 12345678 to be a valid description" duration="0"/>
        <testCase name="expect AAAAAAAA to be a valid description" duration="0"/>
        <testCase name="expect A whole new description has been made! 1234567890 to be a valid description" duration="1"/>
        <testCase name="expect Short! to be an invalid description" duration="0"/>
        <testCase name="expect A to be an invalid description" duration="0"/>
        <testCase name="expect Tiny to be an invalid description" duration="1"/>
        <testCase name="expect A test to be an invalid description" duration="0"/>
        <testCase name="expect &quot;&quot; to be a invalid description" duration="0"/>
        <testCase name="expect undefined to be a invalid description" duration="0"/>
        <testCase name="expect 2021-12-29 to be a valid date" duration="1"/>
        <testCase name="expect 2020-12-31 to be a valid date" duration="0"/>
        <testCase name="expect 2021-12-29 to be a valid date" duration="1"/>
        <testCase name="expect 2020-12-31 to be a valid date" duration="0"/>
        <testCase name="expect 2001-12-32 to be an invalid date" duration="1"/>
        <testCase name="expect 2001-02-28 to be an invalid date" duration="0"/>
        <testCase name="expect Today to be an invalid start date" duration="0"/>
        <testCase name="expect Wednesday 24th June, 2021 to be an invalid start date" duration="0"/>
        <testCase name="expect 30-04-31 to be an invalid start date" duration="0"/>
        <testCase name="expect &quot;&quot; to be an invalid start date" duration="0"/>
        <testCase name="expect 2021-12-25 to be valid end date" duration="0"/>
        <testCase name="expect 2021-02-25 to be valid end date" duration="1"/>
        <testCase name="expect 2022-12-25 to be an invalid end date" duration="0"/>
        <testCase name="expect 2022-02-25 to be an invalid end date" duration="0"/>
        <testCase name="expect 01:00 to be valid time" duration="1"/>
        <testCase name="expect 12:30 to be valid time" duration="0"/>
        <testCase name="expect 19:30 to be valid time" duration="0"/>
        <testCase name="expect half past one to be an invalid time" duration="0"/>
        <testCase name="expect 12:30:20 to be an invalid time" duration="0"/>
        <testCase name="expect 7PM to be an invalid time" duration="0"/>
        <testCase name="expect activity request to have time frame" duration="0"/>
        <testCase name="expect activity request to have time frame" duration="0"/>
        <testCase name="expect undefined to be an invalid timeFrame" duration="0"/>
        <testCase name="expect end date to be formatted to ISO 8601" duration="6"/>
        <testCase name="expect end date to be formatted to ISO 8601" duration="1"/>
        <testCase name="expect end date to be formatted to ISO 8601" duration="0"/>
        <testCase name="expect end date to be formatted to ISO 8601" duration="0"/>
        <testCase name="expect end date to be formatted to ISO 8601" duration="1"/>
        <testCase name="expect end date to be formatted to ISO 8601" duration="0"/>
        <testCase name="expect end date to be formatted to ISO 8601" duration="0"/>
        <testCase name="expect end date to be formatted to ISO 8601" duration="0"/>
        <testCase name="expect end date to be formatted to ISO 8601" duration="1"/>
        <testCase name="expect end date to be formatted to ISO 8601" duration="0"/>
        <testCase name="expect end date to be formatted to ISO 8601" duration="0"/>
        <testCase name="expect duration activity list to not contain continuous activities" duration="0"/>
        <testCase name="expect new continuous activity list to not contain duration based activities" duration="1"/>
    </file>
    <file path="C:\Users\livvy\OneDrive\Desktop\Learning\2020 Sem2\SENG302\team-500\client\src\controllers\profile.controller.test.ts">
        <testCase name="expect updatePassword to throw an error if newPassword is different from repeatPassword" duration="23"/>
        <testCase name="expect updatePassword to throw an error if newPassword is an invalid password" duration="1"/>
        <testCase name="expect updatePassword to send update password request if newPassword is valid and matches repeatPassword" duration="2"/>
        <testCase name="expect updatePassword to send update password request even if old password does not match rules" duration="1"/>
        <testCase name="expect addPassportCountry to throw an error if a country does not exist" duration="1"/>
        <testCase name="expect addPassportCountry to throw an error if New Zealand is already added to the given profile" duration="1"/>
        <testCase name="expect addPassportCountry to throw an error if Australia is already added to the given profile" duration="1"/>
        <testCase name="expect addPassportCountry to add New Zealand to a profile without persisting changes" duration="2"/>
        <testCase name="expect addPassportCountry to add Australia to a profile without persisting changes" duration="0"/>
        <testCase name="expect addPassportCountry to initialise the profile&apos;s passports list if nonexistent" duration="1"/>
        <testCase name="expect addPassportCountry to initialise the profile&apos;s passports list if nonexistent" duration="1"/>
        <testCase name="expect deletePassportCountry to throw an error if given a profile not containing New Zealand" duration="1"/>
        <testCase name="expect deletePassportCountry to throw an error if given a profile not containing No Validation" duration="0"/>
        <testCase name="expect deletePassportCountry to throw an error if given a profile not containing Just Removal" duration="1"/>
        <testCase name="expect deletePassportCountry to remove a country from a profile without persisting changes" duration="1"/>
        <testCase name="expect deletePassportCountry to remove a country from a profile without persisting changes" duration="2"/>
        <testCase name="expect deletePassportCountry to remove a country from a profile without persisting changes" duration="1"/>
        <testCase name="expect addActivityType to throw an error if an activity type does not exist" duration="1"/>
        <testCase name="expect addActivityType to throw an error if Walking is already added to the given profile" duration="1"/>
        <testCase name="expect addActivityType to throw an error if Running is already added to the given profile" duration="1"/>
        <testCase name="expect addActivityType to throw an error if Swimming is already added to the given profile" duration="0"/>
        <testCase name="expect addActivityType to throw an error if Dancing is already added to the given profile" duration="1"/>
        <testCase name="expect addActivityType to add Walking to a profile without persisting changes" duration="1"/>
        <testCase name="expect addActivityType to add Running to a profile without persisting changes" duration="0"/>
        <testCase name="expect addActivityType to add Swimming to a profile without persisting changes" duration="1"/>
        <testCase name="expect addActivityType to add Dancing to a profile without persisting changes" duration="1"/>
        <testCase name="expect addActivityType to initialise the profile&apos;s activities list if nonexistent" duration="1"/>
        <testCase name="expect addActivityType to initialise the profile&apos;s activities list if nonexistent" duration="0"/>
        <testCase name="expect addActivityType to initialise the profile&apos;s activities list if nonexistent" duration="1"/>
        <testCase name="expect addActivityType to initialise the profile&apos;s activities list if nonexistent" duration="1"/>
        <testCase name="expect deleteActivityType to throw an error if given a profile not containing Spinning" duration="0"/>
        <testCase name="expect deleteActivityType to throw an error if given a profile not containing No Validation" duration="0"/>
        <testCase name="expect deleteActivityType to throw an error if given a profile not containing Just Removal" duration="0"/>
        <testCase name="expect deleteActivityType to remove an activity type from a profile without persisting changes" duration="1"/>
        <testCase name="expect deleteActivityType to remove an activity type from a profile without persisting changes" duration="0"/>
        <testCase name="expect deleteActivityType to remove an activity type from a profile without persisting changes" duration="1"/>
        <testCase name="expect persistChangesToProfile to throw an error when a required field is missing" duration="1093"/>
        <testCase name="expect persistChangesToProfile to persist changes when given a valid profile and profile id" duration="0"/>
        <testCase name="expect activity type list to be updated" duration="1"/>
        <testCase name="expect no user found when updating activity types with null user" duration="0"/>
        <testCase name="expect no user found when deleting activity types from null user" duration="0"/>
        <testCase name="expect no activity type error when user has no activity type property" duration="1"/>
        <testCase name="expect no activity type error when user has activity type list empty" duration="0"/>
        <testCase name="expect activity type to be removed from user when exists in list" duration="0"/>
        <testCase name="expect error when trying to remove activity not in list" duration="1"/>
    </file>
</testExecutions>